const mysql = require('mysql2/promise');

async function checkDuplicateMenus() {
  let connection;
  try {
    connection = await mysql.createConnection({
      host: '43.139.80.246',
      port: 3306,
      user: 'root',
      password: 'grc@19980713',
      database: 'wechat_mall'
    });

    console.log('‚úÖ Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü\n');

    // 1. Êü•ËØ¢ admin Áî®Êà∑ÂÖ≥ËÅîÁöÑÊâÄÊúâËèúÂçï
    console.log('üìã 1. admin Áî®Êà∑ÂÖ≥ËÅîÁöÑÊâÄÊúâËèúÂçï:\n');
    const [menus] = await connection.query(`
      SELECT m.id, m.name, m.path, m.type, m.parent_id, m.status, m.created_at
      FROM admins a
      JOIN admin_roles ar ON a.id = ar.admin_id
      JOIN role_menus rm ON ar.role_id = rm.role_id
      JOIN menus m ON rm.menu_id = m.id
      WHERE a.username = 'admin'
      ORDER BY m.name, m.id
    `);

    console.log(`ÂÖ± ${menus.length} ‰∏™ËèúÂçï\n`);

    // 2. Êü•ÊâæÈáçÂ§çÁöÑËèúÂçï
    console.log('üìã 2. Ê£ÄÊü•ÈáçÂ§çÁöÑËèúÂçï:\n');
    const menuNames = {};
    menus.forEach(menu => {
      if (!menuNames[menu.name]) {
        menuNames[menu.name] = [];
      }
      menuNames[menu.name].push(menu);
    });

    let hasDuplicates = false;
    Object.keys(menuNames).forEach(name => {
      if (menuNames[name].length > 1) {
        hasDuplicates = true;
        console.log(`‚ö†Ô∏è  ÈáçÂ§çËèúÂçï: ${name} (${menuNames[name].length} ‰∏™)`);
        console.table(menuNames[name].map(m => ({
          ID: m.id,
          ÂêçÁß∞: m.name,
          Ë∑ØÂæÑ: m.path,
          Á±ªÂûã: m.type === 1 ? 'ÁõÆÂΩï' : m.type === 2 ? 'ËèúÂçï' : 'ÊåâÈíÆ',
          Áà∂Á∫ßID: m.parent_id,
          Áä∂ÊÄÅ: m.status === 1 ? 'ÂêØÁî®' : 'Á¶ÅÁî®',
          ÂàõÂª∫Êó∂Èó¥: m.created_at
        })));
        console.log('');
      }
    });

    if (!hasDuplicates) {
      console.log('‚úÖ Ê≤°ÊúâÂèëÁé∞ÈáçÂ§çÁöÑËèúÂçï');
    }

    // 3. Êü•Áúã role_menus ÂÖ≥ËÅîË°®
    console.log('\nüìã 3. Ê£ÄÊü• role_menus ÂÖ≥ËÅîË°®‰∏≠ÁöÑËèúÂçïÁÆ°ÁêÜ:\n');
    const [roleMenus] = await connection.query(`
      SELECT rm.id, rm.role_id, rm.menu_id, r.name as role_name, m.name as menu_name, m.path
      FROM role_menus rm
      JOIN roles r ON rm.role_id = r.id
      JOIN menus m ON rm.menu_id = m.id
      WHERE r.code = 'super_o_admin' AND m.name = 'ËèúÂçïÁÆ°ÁêÜ'
      ORDER BY rm.id
    `);

    console.log(`super_o_admin ËßíËâ≤ÂÖ≥ËÅîÁöÑ"ËèúÂçïÁÆ°ÁêÜ"Êï∞Èáè: ${roleMenus.length}\n`);
    console.table(roleMenus);

    // 4. Êü•ËØ¢ÊâÄÊúâÂêç‰∏∫"ËèúÂçïÁÆ°ÁêÜ"ÁöÑËèúÂçï
    console.log('\nüìã 4. Êï∞ÊçÆÂ∫ì‰∏≠ÊâÄÊúâ"ËèúÂçïÁÆ°ÁêÜ"ËèúÂçï:\n');
    const [allMenuManage] = await connection.query(`
      SELECT id, name, path, type, parent_id, status, created_at, created_by_name
      FROM menus
      WHERE name = 'ËèúÂçïÁÆ°ÁêÜ'
      ORDER BY id
    `);

    console.table(allMenuManage);

    // 5. Âª∫ËÆÆ
    if (roleMenus.length > 1) {
      console.log('\nüí° Âª∫ËÆÆÊìç‰Ωú:\n');
      console.log('Âà†Èô§ÈáçÂ§çÁöÑ role_menus ÂÖ≥ËÅîËÆ∞ÂΩïÔºå‰øùÁïôÊúÄÊó©ÁöÑÈÇ£‰∏™:');

      const idsToDelete = roleMenus.slice(1).map(rm => rm.id);
      console.log(`DELETE FROM role_menus WHERE id IN (${idsToDelete.join(', ')});`);

      console.log('\nÊàñËÄÖÂà†Èô§ÈáçÂ§çÁöÑËèúÂçïËÆ∞ÂΩïÔºàÂ¶ÇÊûúËèúÂçïÊú¨Ë∫´ÈáçÂ§çÔºâ:');
      if (allMenuManage.length > 1) {
        const menuIdsToDelete = allMenuManage.slice(1).map(m => m.id);
        console.log(`DELETE FROM role_menus WHERE menu_id IN (${menuIdsToDelete.join(', ')});`);
        console.log(`DELETE FROM menus WHERE id IN (${menuIdsToDelete.join(', ')});`);
      }
    }

  } catch (error) {
    console.error('‚ùå Êìç‰ΩúÂ§±Ë¥•:', error.message);
  } finally {
    if (connection) {
      await connection.end();
    }
  }
}

checkDuplicateMenus();
