// SCSS Mixins 工具函数
@import './variables.scss';

// 清除浮动
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// 文本省略号
@mixin text-ellipsis($lines: 1) {
  @if $lines == 1 {
    overflow: hidden;
    white-space: nowrap;
    text-overflow: ellipsis;
  } @else {
    display: -webkit-box;
    -webkit-line-clamp: $lines;
    -webkit-box-orient: vertical;
    overflow: hidden;
    text-overflow: ellipsis;
  }
}

// 居中对齐
@mixin center-flex {
  display: flex;
  align-items: center;
  justify-content: center;
}

@mixin center-absolute {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

// 响应式断点
@mixin respond-to($breakpoint) {
  @if $breakpoint == xs {
    @media (max-width: $breakpoint-xs) {
      @content;
    }
  }
  @if $breakpoint == sm {
    @media (max-width: $breakpoint-sm) {
      @content;
    }
  }
  @if $breakpoint == md {
    @media (max-width: $breakpoint-md) {
      @content;
    }
  }
  @if $breakpoint == lg {
    @media (max-width: $breakpoint-lg) {
      @content;
    }
  }
  @if $breakpoint == xl {
    @media (max-width: $breakpoint-xl) {
      @content;
    }
  }
}

// 按钮样式
@mixin button-style($bg-color: $primary-color, $text-color: $text-inverse) {
  background: linear-gradient(135deg, $bg-color, lighten($bg-color, 5%));
  color: $text-color;
  border: none;
  border-radius: $border-radius;
  padding: $spacing-sm $spacing-md;
  font-weight: 600;
  cursor: pointer;
  transition: all $transition-base $ease-out-quart;
  position: relative;
  overflow: hidden;

  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(255, 255, 255, 0.2), transparent);
    transition: left 0.6s;
  }

  &:hover {
    transform: translateY(-2px);
    box-shadow: $shadow-medium;

    &::before {
      left: 100%;
    }
  }

  &:active {
    transform: translateY(0);
    box-shadow: $shadow-light;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
    box-shadow: none;

    &:hover::before {
      left: -100%;
    }
  }
}

// 卡片样式
@mixin card-style($bg: $bg-card, $border: $border-light) {
  background-color: $bg;
  border: 1px solid $border;
  border-radius: $border-radius-large;
  box-shadow: $shadow-light;
  transition: all $transition-base ease;

  &:hover {
    box-shadow: $shadow-medium;
    transform: translateY(-2px);
  }
}

// 输入框样式
@mixin input-style {
  background-color: $bg-secondary;
  border: 1px solid $border-primary;
  border-radius: $border-radius;
  color: $text-primary;
  font-size: $font-size-md;
  padding: $spacing-sm $spacing-md;
  transition: all $transition-base ease;

  &:focus {
    border-color: $primary-color;
    box-shadow: 0 0 0 2px rgba($primary-color, 0.2);
    outline: none;
  }

  &::placeholder {
    color: $text-tertiary;
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
  }
}

// 渐变背景
@mixin gradient-bg($start: $primary-color, $end: $accent-color, $direction: 135deg) {
  background: linear-gradient($direction, $start, $end);
}

// 阴影效果
@mixin shadow($level: medium) {
  @if $level == light {
    box-shadow: $shadow-light;
  } @else if $level == medium {
    box-shadow: $shadow-medium;
  } @else if $level == heavy {
    box-shadow: $shadow-heavy;
  }
}

// 动画效果
@mixin animate($property: all, $duration: $transition-base, $timing: ease) {
  transition: $property $duration $timing;
}

// 隐藏滚动条
@mixin hide-scrollbar {
  -ms-overflow-style: none;
  scrollbar-width: none;

  &::-webkit-scrollbar {
    display: none;
  }
}

// 安全区域适配
@mixin safe-area-padding($direction: all) {
  @if $direction == all {
    padding-top: constant(safe-area-inset-top);
    padding-right: constant(safe-area-inset-right);
    padding-bottom: constant(safe-area-inset-bottom);
    padding-left: constant(safe-area-inset-left);
    
    padding-top: env(safe-area-inset-top);
    padding-right: env(safe-area-inset-right);
    padding-bottom: env(safe-area-inset-bottom);
    padding-left: env(safe-area-inset-left);
  } @else if $direction == top {
    padding-top: constant(safe-area-inset-top);
    padding-top: env(safe-area-inset-top);
  } @else if $direction == bottom {
    padding-bottom: constant(safe-area-inset-bottom);
    padding-bottom: env(safe-area-inset-bottom);
  }
}