name: Deploy Backend to Production

on:
  push:
    branches:
      - main
    paths:
      - 'backend/**'
      - '.github/workflows/deploy-backend.yml'
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '21.7.1'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        working-directory: ./backend
        run: npm install --legacy-peer-deps

      - name: Build application
        working-directory: ./backend
        run: npm run build

      - name: Run tests
        working-directory: ./backend
        run: npm run test
        continue-on-error: true

      - name: Upload dist to Server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          source: "backend/dist/,backend/package.json,backend/package-lock.json,backend/ecosystem.config.js"
          target: "/www/wwwroot/shop_admin/bk_admin"
          strip_components: 0
          overwrite: true

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@v1.1.0
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          envs: NODE_VERSION
          script: |
            set -ex  # 显示执行的命令
            NODE_VERSION="${NODE_VERSION:-21.7.1}"

            # 设置变量
            APP_DIR="/www/wwwroot/shop_admin/bk_admin/backend"

            # 创建目录（如果不存在）
            echo "Creating app directory..."
            mkdir -p $APP_DIR
            cd $APP_DIR

            echo "Current directory: $(pwd)"
            echo "Files in directory:"
            ls -la

            # 方案 B：在 CI 中显式加载 nvm 并切换版本
            echo "Setting up Node.js environment..."
            export NVM_DIR="/root/.nvm"
            echo "NVM_DIR=$NVM_DIR"
            [ -s "$NVM_DIR/nvm.sh" ] && ls -l "$NVM_DIR/nvm.sh" || true
            if [ -s "$NVM_DIR/nvm.sh" ]; then
              # 防止 auto mode 触发 nvm use N/A
              export NVM_NO_USE=true
              # 加载 nvm（忽略加载阶段的返回码）
              set +e
              . "$NVM_DIR/nvm.sh" || true
              set -e
              echo "Using Node.js 21.7.1 via nvm..."
              nvm use 21.7.1 || { echo "❌ nvm use 21.7.1 failed"; exit 1; }
            else
              echo "❌ nvm not found at $NVM_DIR"; exit 1
            fi

            # 验证版本
            echo "Node.js version: $(node -v)"
            echo "npm version: $(npm -v)"

            # 设置 21.7.1 为默认版本（持久化）
            echo "Setting Node.js 21.7.1 as default..."
            nvm alias default 21.7.1

            # 手动写入到 NVM 配置确保持久化
            echo "21.7.1" > "$NVM_DIR/alias/default"

            # 同时更新 shell 配置文件
            if ! grep -q "nvm use default" ~/.bashrc 2>/dev/null; then
              echo 'export NVM_DIR="$HOME/.nvm"' >> ~/.bashrc
              echo '[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"' >> ~/.bashrc
              echo 'nvm use default --silent' >> ~/.bashrc
            fi

            # 验证默认版本
            echo "Default Node.js version: $(nvm version default)"
            echo "Current active version: $(nvm current)"

            # 重新安装 PM2 到当前 Node 版本（强制重装确保版本一致）
            echo "Installing PM2 for Node.js 21.7.1..."
            npm install -g pm2 --force

            # 验证 PM2 安装
            echo "PM2 version: $(pm2 --version)"
            echo "PM2 path: $(which pm2)"

            # 只安装生产依赖
            echo "Installing production dependencies..."
            npm install --production --legacy-peer-deps || npm install --production || true

            # 检查 .env.production
            if [ -f .env.production ]; then
              echo "✓ .env.production found"
              echo "Checking configuration..."
              grep -E "DATABASE_HOST|REDIS_HOST|NODE_ENV" .env.production || echo "⚠️  Please verify database and redis config"
            else
              echo "❌ .env.production not found! Please create it manually with:"
              echo "  DATABASE_HOST, DATABASE_PASSWORD"
              echo "  REDIS_HOST, REDIS_PASSWORD"
              echo "  SESSION_SECRET, JWT_SECRET"
              exit 1
            fi

            # 使用 PM2 重启应用
            echo "Restarting with PM2..."
            pm2 reload ecosystem.config.js --env production 2>/dev/null || pm2 start ecosystem.config.js --env production

            # 保存 PM2 进程列表
            pm2 save

            echo "✅ Deployment completed!"

      - name: Verify deployment
        uses: appleboy/ssh-action@v1.1.0
        continue-on-error: true
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SERVER_PORT }}
          script: |
            echo "Checking PM2 status..."
            pm2 status || true

            echo "Checking application logs..."
            pm2 logs wechat-mall-backend --lines 20 --nostream || echo "Cannot fetch logs yet"

      - name: Notify deployment status
        if: always()
        run: |
          if [ ${{ job.status }} == 'success' ]; then
            echo "✅ Deployment successful!"
          else
            echo "❌ Deployment failed!"
          fi
